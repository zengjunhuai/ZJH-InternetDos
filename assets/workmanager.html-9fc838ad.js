const e=JSON.parse('{"key":"v-07c4d78a","path":"/cooperation/workManager.html","title":"项目管理","lang":"zh-CN","frontmatter":{"title":"项目管理","description":"项目管理核心权限系统设计\\r基于角色的访问控制（RBAC）; \\r基于属性的访问控制（ABAC）; RBAC模型 当使用 RBAC模型 时，通过分析用户的实际情况，基于共同的职责和需求，授予他们不同角色。这种 用户 -> 角色 -> 权限 间的关系，让我们可以不用再单独管理单个用户权限，用户从授予的角色里面获取所需的权限。 以一个简单的场景（Gitlab ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/ZJH-InternetDos/cooperation/workManager.html"}],["meta",{"property":"og:site_name","content":"互联网学习指南"}],["meta",{"property":"og:title","content":"项目管理"}],["meta",{"property":"og:description","content":"项目管理核心权限系统设计\\r基于角色的访问控制（RBAC）; \\r基于属性的访问控制（ABAC）; RBAC模型 当使用 RBAC模型 时，通过分析用户的实际情况，基于共同的职责和需求，授予他们不同角色。这种 用户 -> 角色 -> 权限 间的关系，让我们可以不用再单独管理单个用户权限，用户从授予的角色里面获取所需的权限。 以一个简单的场景（Gitlab ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.ZJH"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ZJH\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"RBAC模型","slug":"rbac模型","link":"#rbac模型","children":[]},{"level":3,"title":"ABAC模型","slug":"abac模型","link":"#abac模型","children":[]},{"level":3,"title":"RBAC模型 + ABAC模型（相结合）","slug":"rbac模型-abac模型-相结合","link":"#rbac模型-abac模型-相结合","children":[]}],"git":{},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"cooperation/workManager.md","autoDesc":true}');export{e as data};
