import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-b5233593.js";const p="/ZJH-InternetDos/assets/image/KafKa_02.png",e="/ZJH-InternetDos/assets/image/KafKa_03.png",o="/ZJH-InternetDos/assets/image/KafKa_04.png",c="/ZJH-InternetDos/assets/image/KafKa_05.png",i="/ZJH-InternetDos/assets/image/KafKa_06.png",l="/ZJH-InternetDos/assets/image/KafKa_07.png",u="/ZJH-InternetDos/assets/image/KafKa_08.png",r="/ZJH-InternetDos/assets/image/KafKa_09.png",k="/ZJH-InternetDos/assets/image/KafKa_10.png",d="/ZJH-InternetDos/assets/image/KafKa_11.png",v={},m=t('<h2 id="生产消息发送流程" tabindex="-1"><a class="header-anchor" href="#生产消息发送流程" aria-hidden="true">#</a> 生产消息发送流程</h2><h3 id="发送原理" tabindex="-1"><a class="header-anchor" href="#发送原理" aria-hidden="true">#</a> 发送原理</h3><ul><li>在消息发送的过程中，涉及到了两个线程——main线程和Sender 线程。在main线程中创建了一个双端队列RecordAccumulator。main线程将消息发送给 RecordAccumulator， Sender 线程不断从RecordAccumulator中拉取消息发送到Kafka Broker。<br><img src="'+p+'" title="图片标题" width=""></li></ul><h3 id="生产者重要参数列表" tabindex="-1"><a class="header-anchor" href="#生产者重要参数列表" aria-hidden="true">#</a> 生产者重要参数列表</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>生产者连接集群所需的 broker 地址清单。例如 hadoop102:9092,hadoop103:9092,hadoop104:9092，可以设置 1 个或者多个，中间用逗号隔开。注意这里并非需要所有的 broker 地址，因为生产者从给定的 broker 里查找到其他 broker 信息。</td></tr><tr><td>key.serializer 和 value.serializer</td><td>指定发送消息的 key 和 value 的序列化类型。一定要写全类名。</td></tr><tr><td>buffer.memory</td><td>RecordAccumulator缓冲区总大小，默认 32m。</td></tr><tr><td>batch.size</td><td>缓冲区一批数据最大值，默认 16k。适当增加该值，可以提高吞吐量，但是如果该值设置太大，会导致数据传输延迟增加。</td></tr><tr><td>-linger.ms</td><td>如果数据迟迟未达到 batch.size，sender 等待 linger.time 之后就会发送数据。单位 ms，默认值是 0ms，表示没有延迟。生产环境建议该值大小为 5-100ms 之间。</td></tr><tr><td>acks</td><td>0：生产者发送过来的数据，不需要等数据落盘应答。 1：生产者发送过来的数据，Leader 收到数据后应答。 -1（all）：生产者发送过来的数据，Leader+和 isr 队列里面的所有节点收齐数据后应答。默认值是-1，-1 和 all 是等价的。</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>允许最多没有返回 ack 的次数，默认为 5，开启幂等性要保证该值是 1-5 的数字。</td></tr><tr><td>retries</td><td>当消息发送出现错误的时候，系统会重发消息。retries表示重试次数。默认是 int 最大值，2147483647。如果设置了重试，还想保证消息的有序性，需要设置MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=1 否则在重试此失败消息的时候，其他的消息可能发送成功了。</td></tr><tr><td>-retry.backoff.ms&quot;</td><td>两次重试之间的时间间隔，默认是 100ms。</td></tr><tr><td>enable.idempotence</td><td>是否开启幂等性，默认 true，开启幂等性。</td></tr><tr><td>compression.type</td><td>生产者发送的所有数据的压缩方式。默认是 none，也就是不压缩。支持压缩类型：none、gzip、snappy、lz4 和 zstd。</td></tr></tbody></table><h2 id="异步发送" tabindex="-1"><a class="header-anchor" href="#异步发送" aria-hidden="true">#</a> 异步发送</h2><h3 id="普通异步发送-创建-kafka-生产者-采用异步的方式发送到-kafka-broker" tabindex="-1"><a class="header-anchor" href="#普通异步发送-创建-kafka-生产者-采用异步的方式发送到-kafka-broker" aria-hidden="true">#</a> 普通异步发送（创建 Kafka 生产者，采用异步的方式发送到 Kafka Broker）</h3><img src="'+e+`" title="图片标题" width=""><ul><li>创建工程 kafka</li><li>导入依赖</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>dependencies<span class="token operator">&gt;</span> 
     <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span> 
          <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span> 
          <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>kafka<span class="token operator">-</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span> 
          <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span> 
     <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建包名：com.kafka.producer</li><li>编写不带回调函数的 API 代码</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducer</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 	throws 
InterruptedException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息：bootstrap.servers         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> 
<span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
<span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 4. 调用send方法,发送消息 </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 
<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 5. 关闭资源 </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>在hadoop102上开启 Kafka消费者：bin<span class="token operator">/</span>kafka<span class="token operator">-</span><span class="token builtin">console</span><span class="token operator">-</span>consumer<span class="token punctuation">.</span>sh bootstrap<span class="token operator">-</span>server hadoop102<span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>topic first
在<span class="token constant">IDEA</span>中执行代码，观察 hadoop102 控制台中是否接收到消息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带回调函数的异步发送" tabindex="-1"><a class="header-anchor" href="#带回调函数的异步发送" aria-hidden="true">#</a> 带回调函数的异步发送</h3><img src="`+o+`" title="图片标题" width=""><p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发送成功，如果 Exception 不为 null，说明消息发送失败。<br> 注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerCallback</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 	throws 
InterruptedException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息 </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer         properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, </span>
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 4. 调用send方法,发送消息 </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
            <span class="token comment">// 添加回调             kafkaProducer.send(new 	ProducerRecord&lt;&gt;(&quot;first&quot;, &quot;atguigu &quot; + i), new Callback() {  </span>
                <span class="token comment">// 该方法在Producer收到ack时调用，为异步调用 </span>
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                     <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                        <span class="token comment">// 没有异常,输出信息到控制台 </span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; 主 题 ： &quot;</span> <span class="token operator">+</span> 
metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span>  <span class="token operator">+</span> <span class="token string">&quot;分区：&quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
                        <span class="token comment">// 出现异常打印                         exception.printStackTrace(); </span>
                    <span class="token punctuation">}</span> 
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
            <span class="token comment">// 延迟一会会看到数据发往不同分区 </span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 5. 关闭资源 </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 <ul><li>在 hadoop102 上开启 Kafka 消费者：bin/kafka-console-consumer.sh bootstrap-server hadoop102:9092 --topic first</li><li>在 IDEA 中执行代码，观察 hadoop102 控制台中是否接收到消息</li><li>在 IDEA 控制台观察回调信息</li></ul></li></ul><h2 id="同步发送" tabindex="-1"><a class="header-anchor" href="#同步发送" aria-hidden="true">#</a> 同步发送</h2><img src="`+c+`" title="图片标题" width=""><h3 id="只需在异步发送的基础上-再调用一下-get-方法即可" tabindex="-1"><a class="header-anchor" href="#只需在异步发送的基础上-再调用一下-get-方法即可" aria-hidden="true">#</a> 只需在异步发送的基础上，再调用一下 get()方法即可</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerConfig<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerSync</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 	throws
InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息 </span>
   properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;hadoop102 :9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer         properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, </span>
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 4. 调用send方法,发送消息 </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
            <span class="token comment">// 异步发送 默认 </span>
<span class="token comment">//            kafkaProducer.send(new </span>
<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;kafka&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// 同步发送 </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 
<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;kafka&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 5. 关闭资源         kafkaProducer.close(); </span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 <ul><li>在 hadoop102 上开启 Kafka 消费者：bin/kafka-console-consumer.sh bootstrap-server hadoop102:9092 --topic first</li><li>在 IDEA 中执行代码，观察 hadoop102 控制台中是否接收到消息</li></ul></li></ul><h3 id="生产者分区" tabindex="-1"><a class="header-anchor" href="#生产者分区" aria-hidden="true">#</a> 生产者分区</h3><ul><li><p>分区好处</p><ul><li>便于合理使用存储资源，每个Parition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块数据存储在多态Broker上。合理控制分区的任务，可以实现负载均衡的效果。</li><li>提高并行度，生产者可以以分区为单位发送数据，消费者可以以分区为单位进行消费数据<br><img src="`+i+`" title="图片标题" width=""></li></ul></li><li><p>生产者发送消息的分区策略</p><ul><li>默认的分区器 DefaultPartitioner 在 IDEA 中 ctrl +n，全局查找 DefaultPartitioner</li><li>案例一将数据发往指定partition的情况，例如：将所有数据发往分区 1 中</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerCallbackPartitions</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息 </span>
      
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;hadoop102 :9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 指定数据发送到1号分区，key为空（IDEA中ctrl + p查看参数）             </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> 
<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; 主 题 ： &quot;</span> <span class="token operator">+</span> 
metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span>  <span class="token operator">+</span> <span class="token string">&quot;分区：&quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> 
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token punctuation">}</span> 
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
 
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>测试</p><ul><li>在 hadoop102 上开启 Kafka 消费者：bin/kafka-console-consumer.sh bootstrap-server hadoop102:9092 --topic first</li><li>在 IDEA 中执行代码，观察 hadoop102 控制台中是否接收到消息</li><li>在 IDEA 控制台观察回调信息</li></ul></li><li><p>案例二没有指明partition值但有key的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到partition值</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerCallback</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;hadoop102 :9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 依次指定key 值为a,b,f ，数据key 的hash 值与3 个分区求余，分别发往1、2、0 </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 	<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> 
<span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>                 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; 主 题 ： &quot;</span> <span class="token operator">+</span> 
metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;分区：&quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> 
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token punctuation">}</span> 
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
         kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 <ul><li>key=&quot;a&quot;时，在控制台查看结果</li><li>key=&quot;b&quot;时，在控制台查看结果</li><li>key=&quot;f&quot;时，在控制台查看结果</li></ul></li></ul><h3 id="自定义分区器" tabindex="-1"><a class="header-anchor" href="#自定义分区器" aria-hidden="true">#</a> 自定义分区器</h3><ul><li>需求例如我们实现一个分区器实现，发送过来的数据中如果包含 atguigu，就发往 0 号分区，不包含 atguigu，就发往 1 号分区</li><li>实现步骤 <ul><li>定义类实现 Partitioner 接口</li><li>重写 partition()方法</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Partitioner<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Cluster<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> 
 
<span class="token doc-comment comment">/** 
*	1. 实现接口Partitioner 
*	2. 实现3个方法:partition,close,configure 
*	3. 编写partition方法,返回分区号 
 */</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span> 
 
    <span class="token doc-comment comment">/** 
*	返回信息对应的分区 
*	<span class="token keyword">@param</span> <span class="token parameter">topic</span>         主题 
*	<span class="token keyword">@param</span> <span class="token parameter">key</span>           消息的key 
*	<span class="token keyword">@param</span> <span class="token parameter">keyBytes</span>      消息的key序列化后的字节数组 
*	<span class="token keyword">@param</span> <span class="token parameter">value</span>         消息的value 
*	<span class="token keyword">@param</span> <span class="token parameter">valueBytes</span>    消息的value序列化后的字节数组 
*	<span class="token keyword">@param</span> <span class="token parameter">cluster</span>       集群元数据可以查看分区信息 
*	<span class="token keyword">@return</span> 
     */</span> 
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
    <span class="token keyword">public</span> int <span class="token function">partition</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 获取消息 </span>
        String msgValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 创建partition         int partition; </span>
 
        <span class="token comment">// 判断消息是否包含atguigu </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> 
            partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 返回分区号         return partition; </span>
    <span class="token punctuation">}</span> 
 
    <span class="token comment">// 关闭资源 </span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
    <span class="token punctuation">}</span> 
 
    <span class="token comment">// 配置方法 </span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">&gt;</span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用分区器的方法，在生产者的配置中添加分区器参数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerCallbackPartitions</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 
InterruptedException <span class="token punctuation">{</span> 
 	args<span class="token punctuation">)</span> 	throws 
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;hadoop102 :9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 添加自定义分区器 </span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">PARTITIONER_CLASS_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;com.atgui gu.kafka.producer.MyPartitioner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
             
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 	<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> 
<span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span> 
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; 主 题 ： &quot;</span> <span class="token operator">+</span> 
metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&gt;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;分区：&quot;</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> 
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    <span class="token punctuation">}</span> 
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
 
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 <ul><li>测试在 hadoop102 上开启 Kafka 消费者：bin/kafka-console-consumer.sh bootstrap-server hadoop102:9092 --topic first</li><li>在 IDEA 控制台观察回调信息</li></ul></li></ul><h2 id="生产经验" tabindex="-1"><a class="header-anchor" href="#生产经验" aria-hidden="true">#</a> 生产经验</h2><h3 id="生产者如何提高吞吐量" tabindex="-1"><a class="header-anchor" href="#生产者如何提高吞吐量" aria-hidden="true">#</a> 生产者如何提高吞吐量</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerParameters</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 	throws 
InterruptedException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息：bootstrap.servers         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> 
<span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
<span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// batch.size：批次大小，默认16K </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BATCH_SIZE_CONFIG</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// linger.ms：等待时间，默认0         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">LINGER_MS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// RecordAccumulator：缓冲区大小，默认32M：buffer.memory         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BUFFER_MEMORY_CONFIG</span><span class="token punctuation">,</span> 
<span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// compression.type：压缩，默认 none，可配置值 gzip、snappy、 lz4和zstd </span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">COMPRESSION_TYPE_CONFIG</span><span class="token punctuation">,</span><span class="token string">&quot;snappy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 4. 调用send方法,发送消息 </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 
<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 5. 关闭资源 </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 <ul><li>在 hadoop102 上开启 Kafka 消费者：bin/kafka-console-consumer.sh bootstrap-server hadoop102:9092 --topic first</li><li>在 IDEA 中执行代码，观察 hadoop102 控制台中是否接收到消息</li></ul></li></ul><h3 id="数据可靠性" tabindex="-1"><a class="header-anchor" href="#数据可靠性" aria-hidden="true">#</a> 数据可靠性</h3><img src="`+l+`" title="图片标题" width=""><ul><li>ISR：和Leader保持同步的Follower+Leader集合（Leader:0，isr：0，1，2），如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由replica.lag.time.max.ms参数设定，默认30s。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerAck</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 
InterruptedException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息：bootstrap.servers 	throws </span>

        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> 
<span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         
        <span class="token comment">// key,value序列化（必须）：key.serializer，value.serializer         </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span>
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 设置acks </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">ACKS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 重试次数retries，默认是int最大值，2147483647 </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">RETRIES_CONFIG</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 4. 调用send方法,发送消息 </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 
            kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> 
<span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token punctuation">}</span> 
 
        <span class="token comment">// 5. 关闭资源 </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据去重" tabindex="-1"><a class="header-anchor" href="#数据去重" aria-hidden="true">#</a> 数据去重</h3><ul><li><p>幂等性原理</p><ul><li>幂等性就是Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。</li><li>重复数据标准：具有&lt;PID，Partition，SeqNumber&gt;相同主键的消息提交时，Broker只会持久化一条，其中PID是Kafka每次重启都会分配一个新的，Partition表示分区号，Sequence Number是单调自增的</li><li>所以幂等性只能保证的是在单分区但会话内不重复<br><img src="`+u+'" title="图片标题" width=""></li></ul></li><li><p>生产者事务</p><ul><li><p>事务原理<br><img src="'+r+`" title="图片标题" width=""></p></li><li><p>Kafka事务一共有如下5个API</p></li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1初始化事务 </span>
<span class="token keyword">void</span> <span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
<span class="token comment">// 2开启事务 </span>
<span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws ProducerFencedException<span class="token punctuation">;</span> 
 
<span class="token comment">// 3在事务内提交已经消费的偏移量（主要用于消费者） </span>
<span class="token keyword">void</span> <span class="token function">sendOffsetsToTransaction</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">&gt;</span> offsets<span class="token punctuation">,</span> 
                              String 	consumerGroupId<span class="token punctuation">)</span> 	throws 
ProducerFencedException<span class="token punctuation">;</span> 
 
<span class="token comment">// 4提交事务 </span>
<span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws ProducerFencedException<span class="token punctuation">;</span> 
 
<span class="token comment">// 5放弃事务（类似于回滚事务的操作） </span>
<span class="token keyword">void</span> <span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws ProducerFencedException<span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单个 Producer，使用事务保证消息的仅一次发送</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>producer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span> 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerRecord<span class="token punctuation">;</span> 
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProducerTransactions</span> <span class="token punctuation">{</span> 
 
    <span class="token keyword">public</span> 	<span class="token keyword">static</span> 	<span class="token keyword">void</span> 	<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> 	args<span class="token punctuation">)</span> 	throws 
InterruptedException <span class="token punctuation">{</span> 
 
        <span class="token comment">// 1. 创建kafka生产者的配置对象 </span>
        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 2. 给kafka配置对象添加配置信息 </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> 

<span class="token string">&quot;hadoop102:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// key,value序列化 </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> 
StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 设置事务id（必须），事务id任意起名 </span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span><span class="token constant">TRANSACTIONAL_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;transaction_id_0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 3. 创建kafka生产者对象 </span>
        KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> kafkaProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">// 初始化事务         </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// 开启事务         </span>
        kafkaProducer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
        <span class="token keyword">try</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 4. 调用send方法,发送消息             </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token comment">// 发送消息 </span>
                kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> 
<span class="token string">&quot;atguigu &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
 
<span class="token comment">//            int i = 1 / 0; </span>
 
            <span class="token comment">// 提交事务             </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 终止事务             </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token comment">// 5. 关闭资源 </span>
            kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>数据有序<br><img src="`+k+'" title="图片标题" width=""></p></li><li><p>数据乱序<br><img src="'+d+'" title="图片标题" width=""></p></li></ul>',50),b=[m];function g(f,y){return s(),a("div",null,b)}const S=n(v,[["render",g],["__file","KafKa项目_生产者.html.vue"]]);export{S as default};
