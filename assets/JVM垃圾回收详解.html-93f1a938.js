import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as e}from"./app-b5233593.js";const r={},h=e('<h2 id="堆空间的基本结构" tabindex="-1"><a class="header-anchor" href="#堆空间的基本结构" aria-hidden="true">#</a> 堆空间的基本结构</h2><ul><li>新生代</li><li>老年代</li><li>永久代</li></ul><h2 id="内存分配和回收原则" tabindex="-1"><a class="header-anchor" href="#内存分配和回收原则" aria-hidden="true">#</a> 内存分配和回收原则</h2><ul><li>对象优先在Eden区分配</li><li>大对象直接进入老年代</li><li>长期存活的对象进入老年代</li><li>空间分配担保机制</li></ul><h2 id="判断对象是否死亡" tabindex="-1"><a class="header-anchor" href="#判断对象是否死亡" aria-hidden="true">#</a> 判断对象是否死亡</h2><ul><li>引用计数法</li><li>可达性分析（回收的两次标记过程、引用类型）</li></ul><h2 id="判断常量是废弃常量" tabindex="-1"><a class="header-anchor" href="#判断常量是废弃常量" aria-hidden="true">#</a> 判断常量是废弃常量</h2><ul><li>字符串常量池</li></ul><h2 id="判断无用的类" tabindex="-1"><a class="header-anchor" href="#判断无用的类" aria-hidden="true">#</a> 判断无用的类</h2><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><h2 id="垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#垃圾收集算法" aria-hidden="true">#</a> 垃圾收集算法</h2><ul><li>标记-清除</li><li>标记-复制</li><li>标记-整理</li><li>分代收集算法</li></ul><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器" aria-hidden="true">#</a> 垃圾收集器</h2><p>JDK 8：Parallel Scavenge（新生代）+ Parallel Old（老年代）<br> JDK 9 ~ JDK20: G1</p><ul><li>Serial 收集器（单线程、新生代采用标记-复制算法，老年代采用标记-整理算法。）</li><li>ParNew 收集器（多线程、新生代采用标记-复制算法，老年代采用标记-整理算法。）</li><li>Parallel Scavenge 收集器（新生代采用标记-复制算法，老年代采用标记-整理算法）</li><li>Parallel Old 收集器（Parallel Scavenge 收集器的老年代版本）</li><li>G1（G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region）</li></ul>',15),d=[h];function n(t,c){return a(),i("div",null,d)}const u=l(r,[["render",n],["__file","JVM垃圾回收详解.html.vue"]]);export{u as default};
