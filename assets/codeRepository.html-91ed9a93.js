import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as l,d as e,e as i,b as s,f as a}from"./app-b5233593.js";const c="/ZJH-InternetDos/assets/image/gitlab_screen_04.png",o="/ZJH-InternetDos/assets/image/gitlab_screen_05.png",h="/ZJH-InternetDos/assets/image/gitlab_screen_06.png",g="/ZJH-InternetDos/assets/image/gitlab_screen_07.png",b="/ZJH-InternetDos/assets/image/gitlab_screen_08.png",m="/ZJH-InternetDos/assets/image/gitlab_screen_09.png",u="/ZJH-InternetDos/assets/image/gitlab_screen_10.png",v="/ZJH-InternetDos/assets/image/gitlab_screen_11.png",p="/ZJH-InternetDos/assets/image/gitlab_screen_12.png",_="/ZJH-InternetDos/assets/image/gitlab_screen_13.png",x="/ZJH-InternetDos/assets/image/gitlab_screen_14.png",f="/ZJH-InternetDos/assets/image/gitlab_screen_15.png",w="/ZJH-InternetDos/assets/image/gitlab_screen_16.png",G="/ZJH-InternetDos/assets/image/gitlab_screen_01.png",D="/ZJH-InternetDos/assets/image/gitlab_screen_17.png",I="/ZJH-InternetDos/assets/image/gitlab_screen_18.png",k="/ZJH-InternetDos/assets/image/gitlab_screen_19.png",H="/ZJH-InternetDos/assets/image/gitlab_screen_20.png",J="/ZJH-InternetDos/assets/image/gitlab_screen_21.png",Z={},y=a(`<blockquote><p>仓库仅针对开发人员开放</p></blockquote><h2 id="方式一-git仓库" tabindex="-1"><a class="header-anchor" href="#方式一-git仓库" aria-hidden="true">#</a> 方式一：Git仓库</h2><p>GitLab是一款使用MIT许可证的基于网络的Git仓库管理工具，我们可以使用它来搭建自己的Git仓库，本文将介绍如何使用Gitlab在Linux下快速搭建Git仓库。</p><h3 id="gitlab服务端搭建-运用docker" tabindex="-1"><a class="header-anchor" href="#gitlab服务端搭建-运用docker" aria-hidden="true">#</a> Gitlab服务端搭建（运用docker）</h3><h6 id="下载gitlab的docker镜像" tabindex="-1"><a class="header-anchor" href="#下载gitlab的docker镜像" aria-hidden="true">#</a> 下载Gitlab的Docker镜像</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull gitlab/gitlab-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="运行如下命令来启动gitlab" tabindex="-1"><a class="header-anchor" href="#运行如下命令来启动gitlab" aria-hidden="true">#</a> 运行如下命令来启动Gitlab</h6><p>需要注意的是我们的Gitlab的http服务运行在宿主机的1080端口上，这里我们将Gitlab的配置，日志以及数据目录映射到了宿主机的指定文件夹下，防止我们在重新创建容器后丢失数据。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --detach \\
  --publish 10443:443 --publish 1080:80 --publish 1022:22 \\
  --name gitlab \\
  --restart always \\
  --volume /mydata/gitlab/config:/etc/gitlab \\
  --volume /mydata/gitlab/logs:/var/log/gitlab \\
  --volume /mydata/gitlab/data:/var/opt/gitlab \\
  gitlab/gitlab-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="开启防火墙的指定端口" tabindex="-1"><a class="header-anchor" href="#开启防火墙的指定端口" aria-hidden="true">#</a> 开启防火墙的指定端口</h6><p>由于Gitlab运行在1080端口上，所以我们需要开放该端口，注意千万不要直接关闭防火墙，否则Gitlab会无法启动。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 开启1080端口
firewall-cmd --zone=public --add-port=1080/tcp --permanent 
# 重启防火墙才能生效
systemctl restart firewalld
# 查看已经开放的端口
firewall-cmd --list-ports
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="访问gitlab" tabindex="-1"><a class="header-anchor" href="#访问gitlab" aria-hidden="true">#</a> 访问Gitlab</h6>`,13),E={href:"http://192.168.3.101:1080/",target:"_blank",rel:"noopener noreferrer"},N=e("li",null,[e("p",null,[i("由于Gitlab启动比较慢，需要耐心等待10分钟左右，如果Gitlab没有启动完成访问，会出现如下错误。"),e("br"),e("img",{src:c,title:"图片标题",width:""})])],-1),q=e("li",null,[e("p",null,"可以通过docker命令动态查看容器启动日志来知道gitlab是否已经启动完成。")],-1),L=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs gitlab -f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+o+'" title="图片标题" width=""><h3 id="gitlab的使用" tabindex="-1"><a class="header-anchor" href="#gitlab的使用" aria-hidden="true">#</a> Gitlab的使用</h3><p>Gitlab启动完成后第一次访问，会让你重置root帐号的密码<br><img src="'+h+'" title="图片标题" width=""></p><h6 id="重置完成后输入帐号密码登录" tabindex="-1"><a class="header-anchor" href="#重置完成后输入帐号密码登录" aria-hidden="true">#</a> 重置完成后输入帐号密码登录</h6><img src="'+g+'" title="图片标题" width=""><h6 id="选择创建项目、创建组织、创建帐号" tabindex="-1"><a class="header-anchor" href="#选择创建项目、创建组织、创建帐号" aria-hidden="true">#</a> 选择创建项目、创建组织、创建帐号</h6><img src="'+b+'" title="图片标题" width=""><h6 id="创建组织" tabindex="-1"><a class="header-anchor" href="#创建组织" aria-hidden="true">#</a> 创建组织</h6><p>首先我们需要创建一个组织，然后在这个组织下分别创建用户和项目，这样同组织的用户就可以使用该组织下的项目了。<br><img src="'+m+'" title="图片标题" width=""></p><h6 id="创建用户并修改密码" tabindex="-1"><a class="header-anchor" href="#创建用户并修改密码" aria-hidden="true">#</a> 创建用户并修改密码</h6><p>创建用户并修改密码<br><img src="'+u+'" title="图片标题" width=""></p><p>输入用户名密码添加用户<br><img src="'+v+'" title="图片标题" width=""></p><p>在编辑界面中修改用户密码<br><img src="'+p+'" title="图片标题" width=""><br><img src="'+_+'" title="图片标题" width=""></p><h6 id="创建项目并添加readme文件" tabindex="-1"><a class="header-anchor" href="#创建项目并添加readme文件" aria-hidden="true">#</a> 创建项目并添加README文件</h6><img src="'+x+'" title="图片标题" width=""><img src="'+f+'" title="图片标题" width=""><h6 id="将用户分配到组织" tabindex="-1"><a class="header-anchor" href="#将用户分配到组织" aria-hidden="true">#</a> 将用户分配到组织</h6><img src="'+w+'" title="图片标题" width=""><h3 id="git客户端安装及使用" tabindex="-1"><a class="header-anchor" href="#git客户端安装及使用" aria-hidden="true">#</a> Git客户端安装及使用</h3><h6 id="下载git客户端并安装" tabindex="-1"><a class="header-anchor" href="#下载git客户端并安装" aria-hidden="true">#</a> 下载Git客户端并安装</h6>',21),R={href:"https://github.com/git-for-windows/git/releases/download/v2.23.0.windows.1/Git-2.23.0-64-bit.exe",target:"_blank",rel:"noopener noreferrer"},V=e("li",null,[i("下载完成后，一路点击Next安装即可。"),e("br"),e("img",{src:G,title:"图片标题",width:""})],-1),B=a('<h6 id="clone项目" tabindex="-1"><a class="header-anchor" href="#clone项目" aria-hidden="true">#</a> clone项目</h6><ul><li><p>找到项目clone的地址：<br><img src="'+D+'" title="图片标题" width=""></p></li><li><p>打开Git命令行工具：<br><img src="'+I+`" title="图片标题" width=""></p></li><li><p>执行以下命令clone项目到本地：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone http://192.168.3.101:1080/macrozheng/hello.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="提交代码" tabindex="-1"><a class="header-anchor" href="#提交代码" aria-hidden="true">#</a> 提交代码</h6><p>进入项目目录，修改一下README.md并提交：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 进入项目工程目录
cd hello/
# 将当前修改的文件添加到暂存区
git add .
# 提交代码
git commit -m &quot;first commit&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送到远程仓库" aria-hidden="true">#</a> 推送到远程仓库</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+k+'" title="图片标题" width=""><h6 id="拉取远程仓库代码" tabindex="-1"><a class="header-anchor" href="#拉取远程仓库代码" aria-hidden="true">#</a> 拉取远程仓库代码</h6><ul><li><p>在Gitlab上修改readme中的文件内容：<br><img src="'+H+`" title="图片标题" width=""></p></li><li><p>拉取代码：</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="本地创建并提交分支" tabindex="-1"><a class="header-anchor" href="#本地创建并提交分支" aria-hidden="true">#</a> 本地创建并提交分支</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 切换并从当前分支创建一个dev分支
git checkout -b dev
# 将新创建的dev分支推送到远程仓库
git push origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+J+`" title="图片标题" width=""><h6 id="其他常用命令" tabindex="-1"><a class="header-anchor" href="#其他常用命令" aria-hidden="true">#</a> 其他常用命令</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 切换到dev分支
git checkout dev
# 查看本地仓库文件状况
git status
# 查看本地所有分支
git branch
# 查看提交记录
git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function M(z,A){const t=r("ExternalLinkIcon");return d(),l("div",null,[y,e("ul",null,[e("li",null,[e("p",null,[i("访问地址："),e("a",E,[i("http://192.168.3.101:1080/"),s(t)])])]),N,q]),L,e("ul",null,[e("li",null,[i("下载地址："),e("a",R,[i("https://github.com/git-for-windows/git/releases/download/v2.23.0.windows.1/Git-2.23.0-64-bit.exe"),s(t)])]),V]),B])}const S=n(Z,[["render",M],["__file","codeRepository.html.vue"]]);export{S as default};
