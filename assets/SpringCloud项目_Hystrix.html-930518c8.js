import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,d as n,e as s,b as t,f as e}from"./app-b5233593.js";const i="/ZJH-InternetDos/assets/image/springcloud_hystrix_01.png",r="/ZJH-InternetDos/assets/image/springcloud_hystrix_02.png",u="/ZJH-InternetDos/assets/image/springcloud_hystrix_03.png",k="/ZJH-InternetDos/assets/image/springcloud_hystrix_04.png",d="/ZJH-InternetDos/assets/image/springcloud_hystrix_05.png",v="/ZJH-InternetDos/assets/image/springcloud_hystrix_06.png",m="/ZJH-InternetDos/assets/image/springcloud_hystrix_07.png",b="/ZJH-InternetDos/assets/image/springcloud_hystrix_08.png",h={},g=e(`<blockquote><p>该文章参考作者macrozheng博客</p></blockquote><p>Spring Cloud Hystrix 是Spring Cloud Netflix 子项目的核心组件之一，具有服务容错及线程隔离等一系列服务保护功能，本文将对其用法进行详细介绍。</p><h3 id="hystrix-简介" tabindex="-1"><a class="header-anchor" href="#hystrix-简介" aria-hidden="true">#</a> Hystrix 简介</h3><p>在微服务架构中，服务与服务之间通过远程调用的方式进行通信，一旦某个被调用的服务发生了故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，最终导致系统瘫痪。Hystrix实现了断路器模式，当某个服务发生故障时，通过断路器的监控，给调用方返回一个错误响应，而不是长时间的等待，这样就不会使得调用方由于长时间得不到响应而占用线程，从而防止故障的蔓延。Hystrix具备服务降级、服务熔断、线程隔离、请求缓存、请求合并及服务监控等强大功能。</p><h3 id="创建一个hystrix-service模块" tabindex="-1"><a class="header-anchor" href="#创建一个hystrix-service模块" aria-hidden="true">#</a> 创建一个hystrix-service模块</h3><p>这里我们创建一个hystrix-service模块来演示hystrix的常用功能。</p><h6 id="在pom-xml中添加相关依赖" tabindex="-1"><a class="header-anchor" href="#在pom-xml中添加相关依赖" aria-hidden="true">#</a> 在pom.xml中添加相关依赖</h6><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="在application-yml进行配置" tabindex="-1"><a class="header-anchor" href="#在application-yml进行配置" aria-hidden="true">#</a> 在application.yml进行配置</h6><p>主要是配置了端口、注册中心地址及user-service的调用路径。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">8401</span>
spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> hystrix<span class="token operator">-</span>service
eureka<span class="token operator">:</span>
  client<span class="token operator">:</span>
    register<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">true</span>
    fetch<span class="token operator">-</span>registry<span class="token operator">:</span> <span class="token boolean">true</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8001</span><span class="token operator">/</span>eureka<span class="token operator">/</span>
service<span class="token operator">-</span>url<span class="token operator">:</span>
  user<span class="token operator">-</span>service<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>user<span class="token operator">-</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="在启动类上添加-enablecircuitbreaker来开启hystrix的断路器功能" tabindex="-1"><a class="header-anchor" href="#在启动类上添加-enablecircuitbreaker来开启hystrix的断路器功能" aria-hidden="true">#</a> 在启动类上添加@EnableCircuitBreaker来开启Hystrix的断路器功能</h6><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">EnableCircuitBreaker</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">EnableDiscoveryClient</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">SpringBootApplication</span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixServiceApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HystrixServiceApplication<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="创建userhystrixcontroller接口用于调用user-service服务" tabindex="-1"><a class="header-anchor" href="#创建userhystrixcontroller接口用于调用user-service服务" aria-hidden="true">#</a> 创建UserHystrixController接口用于调用user-service服务</h6><h3 id="服务降级演示" tabindex="-1"><a class="header-anchor" href="#服务降级演示" aria-hidden="true">#</a> 服务降级演示</h3><ul><li>在UserHystrixController中添加用于测试服务降级的接口：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testFallback/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testFallback</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UserService中添加调用方法与服务降级方法，方法上需要添加@HystrixCommand注解：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;getDefaultUser&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">getUser</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/{1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> CommonResult <span class="token function">getDefaultUser</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User defaultUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token operator">-</span>1L<span class="token punctuation">,</span> <span class="token string">&quot;defaultUser&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>defaultUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),y=n("li",null,[n("p",null,[s("启动eureka-server、user-service、hystrix-service服务；"),n("br"),n("img",{src:i,title:"图片标题",width:""})])],-1),f={href:"http://localhost:8401/user/testFallback/1",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),C=n("img",{src:r,title:"图片标题",width:""},null,-1),E=n("li",null,[n("p",null,[s("关闭user-service服务重新测试该接口，发现已经发生了服务降级："),n("br"),n("img",{src:u,title:"图片标题",width:""})])],-1),_=e(`<h3 id="hystrixcommand详解" tabindex="-1"><a class="header-anchor" href="#hystrixcommand详解" aria-hidden="true">#</a> @HystrixCommand详解</h3><h6 id="hystrixcommand中的常用参数" tabindex="-1"><a class="header-anchor" href="#hystrixcommand中的常用参数" aria-hidden="true">#</a> @HystrixCommand中的常用参数</h6><ul><li>fallbackMethod：指定服务降级处理方法；</li><li>ignoreExceptions：忽略某些异常，不发生服务降级；</li><li>commandKey：命令名称，用于区分不同的命令；</li><li>groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪表盘信息；</li><li>threadPoolKey：线程池名称，用于划分线程池。</li></ul><h6 id="设置命令、分组及线程池名称" tabindex="-1"><a class="header-anchor" href="#设置命令、分组及线程池名称" aria-hidden="true">#</a> 设置命令、分组及线程池名称</h6><ul><li>在UserHystrixController中添加测试接口：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testCommand/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testCommand</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserCommand</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UserService中添加方式实现功能：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code> <span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;getDefaultUser&quot;</span><span class="token punctuation">,</span>
    commandKey <span class="token operator">=</span> <span class="token string">&quot;getUserCommand&quot;</span><span class="token punctuation">,</span>
    groupKey <span class="token operator">=</span> <span class="token string">&quot;getUserGroup&quot;</span><span class="token punctuation">,</span>
    threadPoolKey <span class="token operator">=</span> <span class="token string">&quot;getUserThreadPool&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">getUserCommand</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/{1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="使用ignoreexceptions忽略某些异常降级" tabindex="-1"><a class="header-anchor" href="#使用ignoreexceptions忽略某些异常降级" aria-hidden="true">#</a> 使用ignoreExceptions忽略某些异常降级</h6><ul><li>使用ignoreExceptions忽略某些异常降级</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testException/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testException</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserException</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UserService中添加实现方法，这里忽略了NullPointerException，当id为1时抛出IndexOutOfBoundsException，id为2时抛出NullPointerException：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;getDefaultUser2&quot;</span><span class="token punctuation">,</span> ignoreExceptions <span class="token operator">=</span> <span class="token punctuation">{</span>NullPointerException<span class="token punctuation">.</span>class<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">getUserException</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/{1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> CommonResult <span class="token function">getDefaultUser2</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;getDefaultUser2 id:{},throwable class:{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    User defaultUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token operator">-</span>2L<span class="token punctuation">,</span> <span class="token string">&quot;defaultUser2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>defaultUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),q={href:"http://localhost:8401/user/tesException/1",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),U=n("img",{src:k,title:"图片标题",width:""},null,-1),B={href:"http://localhost:8401/user/tesException/1",target:"_blank",rel:"noopener noreferrer"},H=n("br",null,null,-1),A=n("img",{src:d,title:"图片标题",width:""},null,-1),R=e(`<h3 id="hystrix的请求缓存" tabindex="-1"><a class="header-anchor" href="#hystrix的请求缓存" aria-hidden="true">#</a> Hystrix的请求缓存</h3><p>当系统并发量越来越大时，我们需要使用缓存来优化系统，达到减轻并发请求线程数，提供响应速度的效果。</p><h6 id="相关注解" tabindex="-1"><a class="header-anchor" href="#相关注解" aria-hidden="true">#</a> 相关注解</h6><ul><li>@CacheResult：开启缓存，默认所有参数作为缓存的key，cacheKeyMethod可以通过返回String类型的方法指定key；</li><li>@CacheKey：指定缓存的key，可以指定参数或指定参数中的属性值为缓存key，cacheKeyMethod还可以通过返回String类型的方法指定；</li><li>@CacheRemove：移除缓存，需要指定commandKey。</li></ul><h6 id="测试使用缓存" tabindex="-1"><a class="header-anchor" href="#测试使用缓存" aria-hidden="true">#</a> 测试使用缓存</h6><ul><li>在UserHystrixController中添加使用缓存的测试接口，直接调用三次getUserCache方法：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testCache/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testCache</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userService<span class="token punctuation">.</span><span class="token function">getUserCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">getUserCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">getUserCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UserService中添加具有缓存功能的getUserCache方法：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">CacheResult</span></span><span class="token punctuation">(</span>cacheKeyMethod <span class="token operator">=</span> <span class="token string">&quot;getCacheKey&quot;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;getDefaultUser&quot;</span><span class="token punctuation">,</span> commandKey <span class="token operator">=</span> <span class="token string">&quot;getUserCache&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getUserCache</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;getUserCache id:{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/{1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 为缓存生成key的方法
 */</span>
<span class="token keyword">public</span> String <span class="token function">getCacheKey</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),F={href:"http://localhost:8401/user/testCache/1,%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E4%B8%AD%E8%B0%83%E7%94%A8%E4%BA%86%E4%B8%89%E6%AC%A1getUserCache%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AA%E6%89%93%E5%8D%B0%E4%BA%86%E4%B8%80%E6%AC%A1%E6%97%A5%E5%BF%97%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%9C%89%E4%B8%A4%E6%AC%A1%E8%B5%B0%E7%9A%84%E6%98%AF%E7%BC%93%E5%AD%98%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),I=n("img",{src:v,title:"图片标题",width:""},null,-1),D=e(`<h6 id="测试移除缓存" tabindex="-1"><a class="header-anchor" href="#测试移除缓存" aria-hidden="true">#</a> 测试移除缓存</h6><ul><li>在UserHystrixController中添加移除缓存的测试接口，调用一次removeCache方法：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testRemoveCache/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testRemoveCache</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">PathVariable</span></span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    userService<span class="token punctuation">.</span><span class="token function">getUserCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">removeCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">getUserCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在UserService中添加具有移除缓存功能的removeCache方法：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">CacheRemove</span></span><span class="token punctuation">(</span>commandKey <span class="token operator">=</span> <span class="token string">&quot;getUserCache&quot;</span><span class="token punctuation">,</span> cacheKeyMethod <span class="token operator">=</span> <span class="token string">&quot;getCacheKey&quot;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span>
<span class="token keyword">public</span> CommonResult <span class="token function">removeCache</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;removeCache id:{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/delete/{1}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),L={href:"http://localhost:8401/user/testRemoveCache/1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E6%9C%89%E4%B8%A4%E6%AC%A1%E6%9F%A5%E8%AF%A2%E9%83%BD%E8%B5%B0%E7%9A%84%E6%98%AF%E6%8E%A5%E5%8F%A3%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},K=n("br",null,null,-1),M=n("img",{src:m,title:"图片标题",width:""},null,-1),P=e(`<h6 id="缓存使用过程中的问题" tabindex="-1"><a class="header-anchor" href="#缓存使用过程中的问题" aria-hidden="true">#</a> 缓存使用过程中的问题</h6><ul><li>在缓存使用过程中，我们需要在每次使用缓存的请求前后对HystrixRequestContext进行初始化和关闭，否则会出现如下异常：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> Request caching <span class="token keyword">is</span> not available<span class="token punctuation">.</span> Maybe you need to initialize the HystrixRequestContext<span class="token operator">?</span>
	at com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixRequestCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HystrixRequestCache<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">104</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hystrix<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">]</span>
	at com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span><span class="token function">AbstractCommand$7</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>AbstractCommand<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">478</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hystrix<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">]</span>
	at com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span><span class="token function">AbstractCommand$7</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>AbstractCommand<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">454</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hystrix<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">1.5</span><span class="token number">.18</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里我们通过使用过滤器，在每个请求前后初始化和关闭HystrixRequestContext来解决该问题：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Created by macro on 2019/9/4.
 */</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">WebFilter</span></span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span>asyncSupported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixRequestContextFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> throws IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>
        HystrixRequestContext context <span class="token operator">=</span> HystrixRequestContext<span class="token punctuation">.</span><span class="token function">initializeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求合并" tabindex="-1"><a class="header-anchor" href="#请求合并" aria-hidden="true">#</a> 请求合并</h3><p>微服务系统中的服务间通信，需要通过远程调用来实现，随着调用次数越来越多，占用线程资源也会越来越多。Hystrix中提供了@HystrixCollapser用于合并请求，从而达到减少通信消耗及线程数量的效果。</p><h6 id="hystrixcollapser的常用属性" tabindex="-1"><a class="header-anchor" href="#hystrixcollapser的常用属性" aria-hidden="true">#</a> @HystrixCollapser的常用属性</h6><ul><li>batchMethod：用于设置请求合并的方法；</li><li>collapserProperties：请求合并属性，用于控制实例属性，有很多；</li><li>timerDelayInMilliseconds：collapserProperties中的属性，用于控制每隔多少时间合并一次请求；</li></ul><h6 id="功能演示" tabindex="-1"><a class="header-anchor" href="#功能演示" aria-hidden="true">#</a> 功能演示</h6><ul><li>在UserHystrixController中添加testCollapser方法，这里我们先进行两次服务调用，再间隔200ms以后进行第三次服务调用：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">GetMapping</span></span><span class="token punctuation">(</span><span class="token string">&quot;/testCollapser&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> CommonResult <span class="token function">testCollapser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
    Future<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> future1 <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserFuture</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Future<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> future2 <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserFuture</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    future1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    future2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ThreadUtil<span class="token punctuation">.</span><span class="token function">safeSleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Future<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> future3 <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserFuture</span><span class="token punctuation">(</span>3L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    future3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用@HystrixCollapser实现请求合并，所有对getUserFuture的的多次调用都会转化为对getUserByIds的单次调用：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCollapser</span></span><span class="token punctuation">(</span>batchMethod <span class="token operator">=</span> <span class="token string">&quot;getUserByIds&quot;</span><span class="token punctuation">,</span>collapserProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixProperty</span></span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;timerDelayInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Future<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUserFuture</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> User <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CommonResult commonResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/{1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map data <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> commonResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> BeanUtil<span class="token punctuation">.</span><span class="token function">mapToBean</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>User<span class="token punctuation">.</span>class<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;getUserById username:{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">HystrixCommand</span></span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUserByIds</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Long<span class="token operator">&gt;</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;getUserByIds:{}&quot;</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CommonResult commonResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>userServiceUrl <span class="token operator">+</span> <span class="token string">&quot;/user/getUserByIds?ids={1}&quot;</span><span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span>class<span class="token punctuation">,</span> CollUtil<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> commonResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),O={href:"http://localhost:8401/user/testCollapser%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E8%AE%BE%E7%BD%AE%E4%BA%86100%E6%AF%AB%E7%A7%92%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6%EF%BC%8C%E5%89%8D%E4%B8%A4%E6%AC%A1%E8%A2%AB%E5%90%88%E5%B9%B6%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E5%8D%95%E7%8B%AC%E5%90%88%E5%B9%B6%E4%BA%86%E3%80%82",target:"_blank",rel:"noopener noreferrer"},T=n("br",null,null,-1),G=n("img",{src:b,title:"图片标题",width:""},null,-1),j=e(`<h3 id="hystrix的常用配置" tabindex="-1"><a class="header-anchor" href="#hystrix的常用配置" aria-hidden="true">#</a> Hystrix的常用配置</h3><h6 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> 全局配置</h6><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>hystrix<span class="token operator">:</span>
  command<span class="token operator">:</span> #用于控制HystrixCommand的行为
    <span class="token keyword">default</span><span class="token operator">:</span>
      execution<span class="token operator">:</span>
        isolation<span class="token operator">:</span>
          strategy<span class="token operator">:</span> <span class="token constant">THREAD</span> #控制HystrixCommand的隔离策略，<span class="token constant">THREAD</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">线程池隔离策略</span><span class="token punctuation">(</span>默认<span class="token punctuation">)</span>，<span class="token constant">SEMAPHORE</span><span class="token operator">-</span><span class="token operator">&gt;</span>信号量隔离策略
          thread<span class="token operator">:</span>
            timeoutInMilliseconds<span class="token operator">:</span> <span class="token number">1000</span> #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理
            interruptOnTimeout<span class="token operator">:</span> <span class="token boolean">true</span> #配置HystrixCommand执行超时的时候是否要中断
            interruptOnCancel<span class="token operator">:</span> <span class="token boolean">true</span> #配置HystrixCommand执行被取消的时候是否要中断
          timeout<span class="token operator">:</span>
            enabled<span class="token operator">:</span> <span class="token boolean">true</span> #配置HystrixCommand的执行是否启用超时时间
          semaphore<span class="token operator">:</span>
            maxConcurrentRequests<span class="token operator">:</span> <span class="token number">10</span> #当使用信号量隔离策略时，用来控制并发量的大小，超过该并发量的请求会被拒绝
      fallback<span class="token operator">:</span>
        enabled<span class="token operator">:</span> <span class="token boolean">true</span> #用于控制是否启用服务降级
      circuitBreaker<span class="token operator">:</span> #用于控制HystrixCircuitBreaker的行为
        enabled<span class="token operator">:</span> <span class="token boolean">true</span> #用于控制断路器是否跟踪健康状况以及熔断请求
        requestVolumeThreshold<span class="token operator">:</span> <span class="token number">20</span> #超过该请求数的请求会被拒绝
        forceOpen<span class="token operator">:</span> <span class="token boolean">false</span> #强制打开断路器，拒绝所有请求
        forceClosed<span class="token operator">:</span> <span class="token boolean">false</span> #强制关闭断路器，接收所有请求
      requestCache<span class="token operator">:</span>
        enabled<span class="token operator">:</span> <span class="token boolean">true</span> #用于控制是否开启请求缓存
  collapser<span class="token operator">:</span> #用于控制HystrixCollapser的执行行为
    <span class="token keyword">default</span><span class="token operator">:</span>
      maxRequestsInBatch<span class="token operator">:</span> <span class="token number">100</span> #控制一次合并请求合并的最大请求数
      timerDelayinMilliseconds<span class="token operator">:</span> <span class="token number">10</span> #控制多少毫秒内的请求会被合并成一个
      requestCache<span class="token operator">:</span>
        enabled<span class="token operator">:</span> <span class="token boolean">true</span> #控制合并请求是否开启缓存
  threadpool<span class="token operator">:</span> #用于控制HystrixCommand执行所在线程池的行为
    <span class="token keyword">default</span><span class="token operator">:</span>
      coreSize<span class="token operator">:</span> <span class="token number">10</span> #线程池的核心线程数
      maximumSize<span class="token operator">:</span> <span class="token number">10</span> #线程池的最大线程数，超过该线程数的请求会被拒绝
      maxQueueSize<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> #用于设置线程池的最大队列大小，<span class="token operator">-</span><span class="token number">1</span>采用SynchronousQueue，其他正数采用LinkedBlockingQueue
      queueSizeRejectionThreshold<span class="token operator">:</span> <span class="token number">5</span> #用于设置线程池队列的拒绝阀值，由于LinkedBlockingQueue不能动态改版大小，使用时需要用该参数来控制线程数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="实例配置" tabindex="-1"><a class="header-anchor" href="#实例配置" aria-hidden="true">#</a> 实例配置</h6><p>实例配置只需要将全局配置中的default换成与之对应的key即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>hystrix<span class="token operator">:</span>
  command<span class="token operator">:</span>
    HystrixComandKey<span class="token operator">:</span> #将<span class="token keyword">default</span>换成HystrixComrnandKey
      execution<span class="token operator">:</span>
        isolation<span class="token operator">:</span>
          strategy<span class="token operator">:</span> <span class="token constant">THREAD</span>
  collapser<span class="token operator">:</span>
    HystrixCollapserKey<span class="token operator">:</span> #将<span class="token keyword">default</span>换成HystrixCollapserKey
      maxRequestsInBatch<span class="token operator">:</span> <span class="token number">100</span>
  threadpool<span class="token operator">:</span>
    HystrixThreadPoolKey<span class="token operator">:</span> #将<span class="token keyword">default</span>换成HystrixThreadPoolKey
      coreSize<span class="token operator">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="配置文件中相关key的说明" tabindex="-1"><a class="header-anchor" href="#配置文件中相关key的说明" aria-hidden="true">#</a> 配置文件中相关key的说明</h6><ul><li>HystrixComandKey对应@HystrixCommand中的commandKey属性；</li><li>HystrixCollapserKey对应@HystrixCollapser注解中的collapserKey属性；</li><li>HystrixThreadPoolKey对应@HystrixCommand中的threadPoolKey属性。</li></ul>`,8);function V(N,Z){const a=o("ExternalLinkIcon");return c(),l("div",null,[g,n("ul",null,[y,n("li",null,[n("p",null,[s("调用接口进行测试："),n("a",f,[s("http://localhost:8401/user/testFallback/1"),t(a)]),x,C])]),E]),_,n("ul",null,[n("li",null,[n("p",null,[s("调用接口进行测试："),n("a",q,[s("http://localhost:8401/user/tesException/1"),t(a)]),w,U])]),n("li",null,[n("p",null,[s("调用接口进行测试："),n("a",B,[s("http://localhost:8401/user/tesException/1"),t(a)]),H,A])])]),R,n("ul",null,[n("li",null,[s("调用接口测试"),n("a",F,[s("http://localhost:8401/user/testCache/1,这个接口中调用了三次getUserCache方法，但是只打印了一次日志，说明有两次走的是缓存："),t(a)]),S,I])]),D,n("ul",null,[n("li",null,[s("调用接口测试"),n("a",L,[s("http://localhost:8401/user/testRemoveCache/1，可以发现有两次查询都走的是接口："),t(a)]),K,M])]),P,n("ul",null,[n("li",null,[s("访问接口测试"),n("a",O,[s("http://localhost:8401/user/testCollapser，由于我们设置了100毫秒进行一次请求合并，前两次被合并，最后一次自己单独合并了。"),t(a)]),T,G])]),j])}const Q=p(h,[["render",V],["__file","SpringCloud项目_Hystrix.html.vue"]]);export{Q as default};
