import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,f as r}from"./app-b5233593.js";const t="/ZJH-InternetDos/assets/image/cooperation_01.png",n="/ZJH-InternetDos/assets/image/cooperation_02.png",o={},c=r('<p>项目管理核心权限系统设计</p><ul><li>基于角色的访问控制（RBAC）</li><li>基于属性的访问控制（ABAC）</li></ul><h3 id="rbac模型" tabindex="-1"><a class="header-anchor" href="#rbac模型" aria-hidden="true">#</a> RBAC模型</h3><p>当使用 RBAC模型 时，通过分析用户的实际情况，基于共同的职责和需求，授予他们不同角色。这种 用户 -&gt; 角色 -&gt; 权限 间的关系，让我们可以不用再单独管理单个用户权限，用户从授予的角色里面获取所需的权限。<br> 以一个简单的场景（Gitlab 的权限系统）为例，用户系统中有 Admin、Maintainer、Operator 三种角色，这三种角色分别具备不同的权限，比如只有 Admin 具备创建代码仓库、删除代码仓库的权限，其他的角色都不具备。我们授予某个用户 Admin 这个角色，他就具备了 创建代码仓库 和 删除代码仓库 这两个权限。<br> 通过 RBAC模型 ，当存在多个用户拥有相同权限时，我们只需要创建好拥有该权限的角色，然后给不同的用户分配不同的角色，后续只需要修改角色的权限，就能自动修改角色内所有用户的权限。</p><img src="'+t+'" title="图片标题" width=""><h3 id="abac模型" tabindex="-1"><a class="header-anchor" href="#abac模型" aria-hidden="true">#</a> ABAC模型</h3><p>基于属性的访问控制（Attribute-Based Access Control，简称 ABAC） 是一种比 RBAC模型 更加灵活的授权模型，它的原理是通过各种属性来动态判断一个操作是否可以被允许。这个模型在云系统中使用的比较多，比如 AWS，阿里云等。<br> 考虑下面这些场景的权限控制：</p><ol><li>授权某个人具体某本书的编辑权限</li><li>当一个文档的所属部门跟用户的部门相同时，用户可以访问这个文档</li><li>当用户是一个文档的拥有者并且文档的状态是草稿，用户可以编辑这个文档</li><li>早上九点前禁止 A 部门的人访问 B 系统</li><li>在除了上海以外的地方禁止以管理员身份访问 A 系统</li><li>用户对 2022-06-07 之前创建的订单有操作权限</li></ol><p>可以发现上述的场景通过 RBAC模型 很难去实现，因为 RBAC模型 仅仅描述了用户可以做什么操作，但是操作的条件，以及操作的数据，RBAC模型 本身是没有这些限制的。但这恰恰是 ABAC模型 的长处，ABAC模型 的思想是基于用户、访问的数据的属性、以及各种环境因素去动态计算用户是否有权限进行操作。</p><h3 id="rbac模型-abac模型-相结合" tabindex="-1"><a class="header-anchor" href="#rbac模型-abac模型-相结合" aria-hidden="true">#</a> RBAC模型 + ABAC模型（相结合）</h3><p>在RBAC模型的基础上，新增了给用户直接增加权限的能力，也就是说既可以给用户添加角色，也可以给用户直接添加权限。最终用户的权限是由拥有的角色和权限点组合而成。<br><img src="'+n+'" title="图片标题" width=""></p>',11),s=[c];function l(A,d){return e(),i("div",null,s)}const _=a(o,[["render",l],["__file","workmanager.html.vue"]]);export{_ as default};
