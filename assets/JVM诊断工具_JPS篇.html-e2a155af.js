import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,f as t}from"./app-b5233593.js";const i={},d=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><ul><li>查询正在运行的虚拟机进程。<br> 说明：对于本地虚拟机进程来说，进程的本地虚拟机ID与操作系统的进程ID是一致的，是唯一的。</li></ul><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>（图片资源放上去速度慢，待完善）</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><h3 id="option参数" tabindex="-1"><a class="header-anchor" href="#option参数" aria-hidden="true">#</a> option参数</h3><p>-q：仅仅显示LVMID（local virtual machine id），即本地虚拟机唯一id。不显示主类的名称等</p><p>-l：输出应用程序主类的全类名或如果进程执行的是jar包，则输出jar完整路径</p><p>-m：输出虚拟机进程启动时传递给主类main()的参数</p><p>-v：列出虚拟机进程启动时的JVM参数。比如：-Xms20m -Xmx50m是启动程序指定的jvm参数</p><p>说明：以上参数可以综合使用</p><p>补充：<br> 如果某Java进程关闭了默认开启的UserPerfData参数（即使用参数-XX：-UsePerfData），那么jps命令（以及下面介绍的jstat）将无法探知该Java进程。</p><h3 id="hosid参数" tabindex="-1"><a class="header-anchor" href="#hosid参数" aria-hidden="true">#</a> hosid参数</h3><p>RMI注册表中注册的主机号</p><p>如果想要远程监控主机上的java程序，需要安装jstatd</p><p>对于具有更严格的安全实践的网络场所而言，可能使用一个自定义的策略文件来显示对特定的可信主机或网络的访问，尽管这种技术容易受到IP地址欺诈攻击</p><p>如果安全问题无法使用一个定制的策略文件来处理，那么最安全的操作是不运行jstatd服务器，而是在本地使用jstat和jps工具。</p>',17),h=[d];function s(n,o){return e(),r("div",null,h)}const _=a(i,[["render",s],["__file","JVM诊断工具_JPS篇.html.vue"]]);export{_ as default};
