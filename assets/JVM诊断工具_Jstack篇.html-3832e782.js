import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,f as s}from"./app-b5233593.js";const t={},r=s(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>jstack（JVM Stack Trace）：用于生成虚拟机指定进程当前时刻的线程快照（虚拟机堆栈跟踪）。线程快照就是当前虚拟机内指定进程的每一条线程正在执行的方法堆栈的集合</p><p>生成线程快照的作用，就可用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等问题。这些都是导致线程长时间停顿的常见原因。当线程出现停顿时，就可以用jstack显示各个线程调用的堆栈情况。</p><p>在thread dump中，要留意下面几种状态：<br> 死锁，Deadlock（重点关注）<br> 等待资源，Waiting on condition（重点关注）<br> 等待获取监视器，Waiting on monitor entry（重点关注）<br> 阻塞，Blocked（重点关注）<br> 执行中，Runnable<br> 暂停，Suspended<br> 对象等待中：Object.wait()或TIMED_WAITING<br> 停止：Parked</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>（图片资源放上去速度慢，待完善）</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">-</span><span class="token constant">F</span>：当正常输出的请求不被响应时，强制输出线程堆栈
<span class="token operator">-</span>l：a、除堆栈外，显示关于锁的附加信息。b、如果调用到本地方法的话，可以显示<span class="token constant">C</span><span class="token operator">/</span><span class="token constant">C</span><span class="token operator">++</span>的堆栈
<span class="token operator">-</span>h：帮助操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),c=[r];function o(i,d){return e(),n("div",null,c)}const h=a(t,[["render",o],["__file","JVM诊断工具_Jstack篇.html.vue"]]);export{h as default};
